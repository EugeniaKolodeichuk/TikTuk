{"version":3,"sources":["views/ProfileView.js"],"names":["ProfileView","uniqueId","useParams","useState","userFeed","setUserFeed","userInfo","setUserInfo","axios","require","default","feed","method","url","headers","useEffect","request","then","response","feedsData","data","catch","error","console","info","infoData","user","width","src","avatarThumb","alt","nickname","shortid","generate","signature","stats","followerCount","followingCount","videoCount","heart","length","map","playCount","video","dynamicCover","desc"],"mappings":"kMAQe,SAASA,IACtB,IAAQC,EAAaC,cAAbD,SAGR,EAAgCE,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAQC,EAAQ,IAASC,QAEzBC,EAAO,CACXC,OAAQ,MACRC,IAAI,6CAAD,OAA+CZ,GAClDa,QAAS,CACP,kBAAmB,0BACnB,iBAAkB,uDAItBC,qBAAU,WACRP,EACGQ,QAAQL,GACRM,MAAK,SAAUC,GACd,IAAMC,EAAYD,EAASE,KAC3Bf,EAAYc,MAEbE,OAAM,SAAUC,GACfC,QAAQD,MAAMA,QAGjB,CAACjB,IAGJ,IAAMmB,EAAO,CACXZ,OAAQ,MACRC,IAAI,6CAAD,OAA+CZ,GAClDa,QAAS,CACP,kBAAmB,0BACnB,iBAAkB,uDAiBtB,OAdAC,qBAAU,WACRP,EACGQ,QAAQQ,GACRP,MAAK,SAAUC,GACd,IAAMO,EAAWP,EAASE,KAC1Bb,EAAYkB,MAEbJ,OAAM,SAAUC,GACfC,QAAQD,MAAMA,QAGjB,CAACf,IAIF,gCACGD,EAASoB,MACR,eAAC,WAAD,WACE,qBAEEC,MAAM,QACNC,IAAKtB,EAASoB,KAAKG,YACnBC,IAAKxB,EAASoB,KAAKK,UAHdC,IAAQC,YAKf,6BAAK3B,EAASoB,KAAKK,WACnB,4BAAIzB,EAASoB,KAAKQ,YAClB,8BACE,4BAAI5B,EAAS6B,MAAMC,gBADrB,gBAGA,8BACE,4BAAI9B,EAAS6B,MAAME,iBADrB,iBAGA,8BACE,4BAAI/B,EAAS6B,MAAMG,aADrB,aAGA,8BACE,4BAAIhC,EAAS6B,MAAMI,QADrB,aAGA,yDAA4BjC,EAASoB,KAAKK,cArB7BC,IAAQC,YAwBxB7B,EAASoC,OACRpC,EAASqC,KAAI,SAAAf,GAAI,OACf,eAAC,WAAD,WACE,8BACE,4BAAIA,EAAKS,MAAMO,YADjB,YAGA,qBAEEf,MAAM,QACNC,IAAKF,EAAKiB,MAAMC,aAChBd,IAAKJ,EAAKmB,MAHLb,IAAQC,YAMf,4BAAIP,EAAKmB,SAXIb,IAAQC,eAezB","file":"static/js/8.d5574dac.chunk.js","sourcesContent":["import { useParams } from 'react-router';\r\n/* import { axios } from '../services/apiService'; */\r\n\r\nimport { useState, useEffect, Fragment } from 'react';\r\nimport shortid from 'shortid';\r\n\r\n/* export const uniqueId = 'kikakiim'; */\r\n\r\nexport default function ProfileView() {\r\n  const { uniqueId } = useParams();\r\n  /* console.log(uniqueId); */\r\n\r\n  const [userFeed, setUserFeed] = useState([]);\r\n  const [userInfo, setUserInfo] = useState([]);\r\n\r\n  const axios = require('axios').default;\r\n\r\n  const feed = {\r\n    method: 'GET',\r\n    url: `https://tiktok33.p.rapidapi.com/user/feed/${uniqueId}`,\r\n    headers: {\r\n      'x-rapidapi-host': 'tiktok33.p.rapidapi.com',\r\n      'x-rapidapi-key': '98c48d70edmsh2b6af9661af19a5p11b7f7jsnbe8317f49551',\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .request(feed)\r\n      .then(function (response) {\r\n        const feedsData = response.data;\r\n        setUserFeed(feedsData);\r\n      })\r\n      .catch(function (error) {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line\r\n  }, [setUserFeed]);\r\n  /* console.log(userFeed); */\r\n\r\n  const info = {\r\n    method: 'GET',\r\n    url: `https://tiktok33.p.rapidapi.com/user/info/${uniqueId}`,\r\n    headers: {\r\n      'x-rapidapi-host': 'tiktok33.p.rapidapi.com',\r\n      'x-rapidapi-key': '98c48d70edmsh2b6af9661af19a5p11b7f7jsnbe8317f49551',\r\n    },\r\n  };\r\n  useEffect(() => {\r\n    axios\r\n      .request(info)\r\n      .then(function (response) {\r\n        const infoData = response.data;\r\n        setUserInfo(infoData);\r\n      })\r\n      .catch(function (error) {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line\r\n  }, [setUserInfo]);\r\n  /* console.log(userInfo); */\r\n\r\n  return (\r\n    <div>\r\n      {userInfo.user && (\r\n        <Fragment key={shortid.generate()}>\r\n          <img\r\n            key={shortid.generate()}\r\n            width=\"150px\"\r\n            src={userInfo.user.avatarThumb}\r\n            alt={userInfo.user.nickname}\r\n          />\r\n          <h2>{userInfo.user.nickname}</h2>\r\n          <p>{userInfo.user.signature}</p>\r\n          <p>\r\n            <b>{userInfo.stats.followerCount}</b> followers\r\n          </p>\r\n          <p>\r\n            <b>{userInfo.stats.followingCount}</b> followings\r\n          </p>\r\n          <p>\r\n            <b>{userInfo.stats.videoCount}</b> videos\r\n          </p>\r\n          <p>\r\n            <b>{userInfo.stats.heart}</b> hearts\r\n          </p>\r\n          <h3>Other posts created by {userInfo.user.nickname}</h3>\r\n        </Fragment>\r\n      )}\r\n      {userFeed.length ? (\r\n        userFeed.map(user => (\r\n          <Fragment key={shortid.generate()}>\r\n            <p>\r\n              <b>{user.stats.playCount}</b> views\r\n            </p>\r\n            <img\r\n              key={shortid.generate()}\r\n              width=\"400px\"\r\n              src={user.video.dynamicCover}\r\n              alt={user.desc}\r\n            />\r\n\r\n            <p>{user.desc}</p>\r\n          </Fragment>\r\n        ))\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}